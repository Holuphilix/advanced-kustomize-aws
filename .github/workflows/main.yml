name: Deploy with Kustomize

# Trigger workflow on push to main and pull requests targeting main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Cache Docker layers for faster builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Set up Kustomize
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: '5.7.1'

      # Configure kubeconfig from secret
      - name: Configure kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_DATA" | base64 --decode > $HOME/.kube/config

      # Deploy to Production overlay (only on push to main)
      - name: Deploy to Production
        if: github.event_name == 'push'
        run: kubectl apply -k overlays/production

      # Verify deployment (optional, runs on push & PR)
      - name: Verify Production Deployment
        run: |
          kubectl get pods -n myapp-namespace
          kubectl exec -it $(kubectl get pods -n myapp-namespace -l app=myapp -o jsonpath='{.items[0].metadata.name}') -n myapp-namespace -- env | grep ENV
          kubectl exec -it $(kubectl get pods -n myapp-namespace -l app=myapp -o jsonpath='{.items[0].metadata.name}') -n myapp-namespace -- env | grep LOG_LEVEL